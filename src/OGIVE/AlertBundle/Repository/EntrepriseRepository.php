<?php

namespace OGIVE\AlertBundle\Repository;

/**
 * EntrepriseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntrepriseRepository extends \Doctrine\ORM\EntityRepository
{
    public function deleteEntreprise(\OGIVE\AlertBundle\Entity\Entreprise $entreprise) {
        $em= $this->_em;
        $repositorySubscriber = $em->getRepository("OGIVEAlertBundle:Subscriber");
        $entreprise->setStatus(0);
        $em->getConnection()->beginTransaction();
        try{
            $subscribers = $entreprise->getSubscribers();
            foreach ($subscribers as $subscriber) {
                $subscriber->setStatus(0);
                $repositorySubscriber->updateSubscriber($subscriber);
            }
            $em->persist($entreprise);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }


    public function saveEntreprise(\OGIVE\AlertBundle\Entity\Entreprise $entreprise) {
        $em= $this->_em;
        $entreprise->setStatus(1);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($entreprise);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $entreprise;
    }

    public function updateEntreprise(\OGIVE\AlertBundle\Entity\Entreprise $entreprise) {
        $em= $this->_em;
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($entreprise);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $entreprise;
    }
    public function getAll($offset=null, $limit=null) 
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.status = :status')
            ->orderBy('e.createDate', 'DESC')
            ->setParameter('status', 1);
        if($offset){
            $qb->setFirstResult($offset);
        }
        if($limit){
            $qb->setMaxResults($limit);
        }
        return $qb->getQuery()->getResult();
    }
    
    public function getEntrepriseQueryBuilder() {
         return $this
          ->createQueryBuilder('e')
          ->where('e.status = :status')
          ->andWhere('e.state = :state')
          ->orderBy('e.name', 'ASC')
          ->setParameter('status', 1)
         ->setParameter('state', 1);

    }
}
