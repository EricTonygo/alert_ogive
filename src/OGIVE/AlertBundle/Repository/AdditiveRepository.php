<?php

namespace OGIVE\AlertBundle\Repository;


use Doctrine\ORM\EntityRepository;
/**
 * AdditiveRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdditiveRepository extends EntityRepository
{
    public function deleteAdditive(\OGIVE\AlertBundle\Entity\Additive $additive) {
        $em= $this->_em;
        $additive->setStatus(0);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($additive);
            $em->flush();
            $em->getConnection()->commit();
            return $additive;
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }


    public function saveAdditive(\OGIVE\AlertBundle\Entity\Additive $additive) {
        $em= $this->_em;
        $additive->setStatus(1);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($additive);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $additive;
    }

    public function updateAdditive(\OGIVE\AlertBundle\Entity\Additive $additive) {
        $em= $this->_em;
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($additive);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $additive;
    }
    public function getAll($offset = null, $limit = null, $search_query = null, $start_date = null, $end_date = null, $owner = null, $domain = null) {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.status = 1');
        if ($search_query) {
            $qb->andWhere(
                    $qb->expr()->orX(
                            $qb->expr()->like('lower(e.reference)', ':search_query'), $qb->expr()->like('lower(e.object)', ':search_query'), $qb->expr()->like('lower(e.owner)', ':search_query')
            ));
            $search_query = strtolower($search_query);
            $qb->setParameter('search_query', '%' . strtolower($search_query) . '%');
        }
        if ($start_date && $end_date) {
            $qb->andWhere(
                    $qb->expr()->between('e.publicationDate', ':start_date', ':end_date')
            );
            $start_date_DT = new \DateTime(date('Y-m-d H:i:s', strtotime(str_replace('/', '-', $start_date))));
            $end_date_DT = new \DateTime(date('Y-m-d H:i:s', strtotime(str_replace('/', '-', $end_date))));
            $qb->setParameter("start_date", $start_date_DT);
            $qb->setParameter("end_date", $end_date_DT);
        }
        if ($owner && $owner !="0") {
            $qb->andWhere(
                    $qb->expr()->orX(
                            $qb->expr()->like('lower(e.owner)', ':owner'), $qb->expr()->like('e.owner', ':owner')
            ));
            $qb->setParameter('owner', '%' . $owner . '%');
        }
        if ($domain && $domain != "0") {
            $qb->join("e.domain", 'd');
            $qb->andWhere('d.id = :domain');
            $qb->setParameter("domain", intval($domain));
        }
        $qb->orderBy('e.createDate', 'DESC');
        
        if ($offset) {
            $qb->setFirstResult($offset);
        }
        if ($limit) {
            $qb->setMaxResults($limit);
        }
        return $qb->getQuery()->getResult();
    }

    public function getAllByQueriedParameters($search_query = null, $start_date = null, $end_date = null, $owner = null, $domain = null) {
        
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.status = 1');
        if ($search_query) {
            $qb->andWhere(
                    $qb->expr()->orX(
                            $qb->expr()->like('lower(e.reference)', ':search_query'), $qb->expr()->like('lower(e.object)', ':search_query'), $qb->expr()->like('lower(e.owner)', ':search_query')
            ));
            $search_query = strtolower($search_query);
            $qb->setParameter('search_query', '%' . strtolower($search_query) . '%');
        }
        if ($start_date && $end_date) {
            $qb->andWhere(
                    $qb->expr()->between('e.publicationDate', ':start_date', ':end_date')
            );
            $start_date_DT = new \DateTime(date('Y-m-d H:i:s', strtotime(str_replace('/', '-', $start_date))));
            $end_date_DT = new \DateTime(date('Y-m-d H:i:s', strtotime(str_replace('/', '-', $end_date))));
            $qb->setParameter("start_date", $start_date_DT);
            $qb->setParameter("end_date", $end_date_DT);
        }
        if ($owner && $owner !="0") {
            $qb->andWhere(
                    $qb->expr()->orX(
                            $qb->expr()->like('lower(e.owner)', ':owner'), $qb->expr()->like('e.owner', ':owner')
            ));
            $qb->setParameter('owner', '%' . $owner . '%');
        }
        if ($domain && $domain != "0") {
            $qb->join("e.domain", 'd');
            $qb->andWhere('d.id = :domain');
            $qb->setParameter("domain", intval($domain));
        }
        $qb->orderBy('e.createDate', 'DESC');
        return $qb->getQuery()->getResult();
    }
    
    public function getAdditiveQueryBuilder() {
         return $this
          ->createQueryBuilder('e')
          ->where('e.status = :status')
          ->andWhere('e.state = :state')
          ->orderBy('e.reference', 'ASC')
          ->setParameter('status', 1)
         ->setParameter('state', 1);

    }
}
