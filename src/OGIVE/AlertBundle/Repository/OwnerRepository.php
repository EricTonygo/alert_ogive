<?php

namespace OGIVE\AlertBundle\Repository;

/**
 * OwnerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OwnerRepository extends \Doctrine\ORM\EntityRepository {

    public function deleteOwner(\OGIVE\AlertBundle\Entity\Owner $owner) {
        $em = $this->_em;
        $owner->setStatus(0);
        $em->getConnection()->beginTransaction();
        try {
            $em->persist($owner);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }

    public function saveOwner(\OGIVE\AlertBundle\Entity\Owner $owner) {
        $em = $this->_em;
        $owner->setStatus(1);
        $owner->setState(1);
        $em->getConnection()->beginTransaction();
        try {
            $em->persist($owner);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $owner;
    }

    public function saveOwnerForProcedure(\OGIVE\AlertBundle\Entity\AlertProcedure $procedure) {
        $em = $this->_em;
        $owner = new \OGIVE\AlertBundle\Entity\Owner();
        $owner->setName($procedure->getOwner());
        $owner->setNumero(strtolower($procedure->getOwner()));
        $ownerUnique = $em->getRepository("OGIVEAlertBundle:Owner")->findBy(array('numero' => $owner->getNumero(), 'status' => 1, 'state' => 1));
        if ($ownerUnique == null && $owner) {
            try {
                return $this->saveOwner($owner);
            } catch (Exception $ex) {
                throw $ex;
            }
        }
        return null;
    }

    public function updateOwner(\OGIVE\AlertBundle\Entity\Owner $owner) {
        $em = $this->_em;
        $em->getConnection()->beginTransaction();
        try {
            $em->persist($owner);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
        return $owner;
    }

    public function getAll($offset = null, $limit = null, $search_query = null) {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.status = ?1');
        if ($search_query) {
            $qb->andWhere(
                    $qb->expr()->like('lower(e.content)', '?2')
            );
        }
        $qb->orderBy('e.createDate', 'DESC');
        if ($search_query) {
            $qb->setParameters(array(1 => 1, 2 => '%' . strtolower($search_query) . '%'));
        } else {
            $qb->setParameters(array(1 => 1));
        }
        if ($offset) {
            $qb->setFirstResult($offset);
        }
        if ($limit) {
            $qb->setMaxResults($limit);
        }
        return $qb->getQuery()->getResult();
    }

    public function getAllByString($search_query = null) {

        $qb = $this->createQueryBuilder('e');
        $qb->where('e.status = ?1');
        if ($search_query) {
            $qb->andWhere(
                    $qb->expr()->like('lower(e.name)', '?2')
            );
        }
        $qb->orderBy('e.createDate', 'DESC');
        if ($search_query) {
            $search_query = strtolower($search_query);
            $qb->setParameters(array(1 => 1, 2 => '%' . strtolower($search_query) . '%'));
        } else {
            $qb->setParameters(array(1 => 1));
        }
        return $qb->getQuery()->getResult();
    }

    public function getOwnerQueryBuilder() {
        return $this
                        ->createQueryBuilder('e')
                        ->where('e.status = :status')
                        ->andWhere('e.state = :state')
                        ->orderBy('e.name', 'ASC')
                        ->setParameter('status', 1)
                        ->setParameter('state', 1);
    }

}
